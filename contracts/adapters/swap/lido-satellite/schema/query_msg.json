{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "QUERY       ///",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "router_contract_address"
      ],
      "properties": {
        "router_contract_address": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "simulate_swap_exact_asset_out"
      ],
      "properties": {
        "simulate_swap_exact_asset_out": {
          "type": "object",
          "required": [
            "asset_out",
            "swap_operations"
          ],
          "properties": {
            "asset_out": {
              "$ref": "#/definitions/Asset"
            },
            "swap_operations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "simulate_swap_exact_asset_in"
      ],
      "properties": {
        "simulate_swap_exact_asset_in": {
          "type": "object",
          "required": [
            "asset_in",
            "swap_operations"
          ],
          "properties": {
            "asset_in": {
              "$ref": "#/definitions/Asset"
            },
            "swap_operations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "SwapOperation": {
      "type": "object",
      "required": [
        "denom_in",
        "denom_out",
        "pool"
      ],
      "properties": {
        "denom_in": {
          "type": "string"
        },
        "denom_out": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
